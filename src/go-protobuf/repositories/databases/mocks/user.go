// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	api "go-protobuf/api"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UserDatabase is an autogenerated mock type for the UserDatabase type
type UserDatabase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, tx, userCode
func (_m *UserDatabase) Delete(ctx context.Context, tx *sql.Tx, userCode string) error {
	ret := _m.Called(ctx, tx, userCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) error); ok {
		r0 = rf(ctx, tx, userCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, tx, username
func (_m *UserDatabase) Get(ctx context.Context, tx *sql.Tx, username string) (*api.UserModel, error) {
	ret := _m.Called(ctx, tx, username)

	var r0 *api.UserModel
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) *api.UserModel); ok {
		r0 = rf(ctx, tx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, tx, user
func (_m *UserDatabase) Insert(ctx context.Context, tx *sql.Tx, user *api.UserModel) (int64, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *api.UserModel) int64); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *api.UserModel) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, tx
func (_m *UserDatabase) List(ctx context.Context, tx *sql.Tx) ([]*api.UserModel, error) {
	ret := _m.Called(ctx, tx)

	var r0 []*api.UserModel
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) []*api.UserModel); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, user
func (_m *UserDatabase) Update(ctx context.Context, tx *sql.Tx, user *api.UserModel) error {
	ret := _m.Called(ctx, tx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *api.UserModel) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
